=== tests/cases/compiler/uncalledFunctionChecksInConditional.ts ===
declare function isFoo(): boolean;
>isFoo : () => boolean

declare function isBar(): boolean;
>isBar : () => boolean

declare const isUndefinedFoo: () => boolean | undefined;
>isUndefinedFoo : () => boolean | undefined

if (isFoo) {
>isFoo : () => boolean

    // error
}

if (isUndefinedFoo) {
>isUndefinedFoo : () => boolean | undefined

    // no error
}

if (!isFoo) {
>!isFoo : false
>isFoo : () => boolean

    // error
}

if (!isUndefinedFoo) {
>!isUndefinedFoo : false
>isUndefinedFoo : () => boolean | undefined

    // no error
}

if (isFoo || isBar) {
>isFoo || isBar : () => boolean
>isFoo : () => boolean
>isBar : () => boolean

    // error
}

if (isFoo || isFoo()) {
>isFoo || isFoo() : () => boolean
>isFoo : () => boolean
>isFoo() : boolean
>isFoo : () => boolean

    // error
}

if (isFoo && isFoo()) {
>isFoo && isFoo() : boolean
>isFoo : () => boolean
>isFoo() : boolean
>isFoo : () => boolean

    // no error
}

if (!isFoo || isFoo()) {
>!isFoo || isFoo() : boolean
>!isFoo : false
>isFoo : () => boolean
>isFoo() : boolean
>isFoo : () => boolean

    // error
}

if (!isUndefinedFoo || isFoo()) {
>!isUndefinedFoo || isFoo() : boolean
>!isUndefinedFoo : false
>isUndefinedFoo : () => boolean | undefined
>isFoo() : boolean
>isFoo : () => boolean

    // no error
}

